// reset
* {
    box-sizing: border-box;
    outline: none;
  }
  html {
    font-size: 13px;
  }
  body {
    margin: 0;
    font-family: Arial, Helvetica, sans-serif;
    line-height: 1.2em;
    background: #f1f1f1;
  }
  a {
    color: #999;
  }
  
  // colors
  $colors: (
    'primary': #db9e3f,
    'white': #fff,
    'light': #f9f9f9,
    'grey': #999,
    'dark-1': #343440,
    'dark': #222,
    'black': #000,
  );
  // 颜色 背景色
  @each $colorKey, $color in $colors {
    .text-#{$colorKey} {
      color: $color;
    }
    .bg-#{$colorKey} {
      background-color: $color;
    }
  }
  // text align 
  @each $var in (left, center, right) {
    .text-#{$var} {
      text-align: $var;
    }
  }
  // font size
  $base-font-size: 1rem;
  $font-sizes: (
    xs: 0.7692, //10px
    sm: 0.9231, //12px
    md: 1, //13px
    lg: 1.0769, //14px
    xl: 1.2308, //16px
  );

  
  @each $sizeKey, $size in $font-sizes {
    .fs-#{$sizeKey} {
      font-size: $size * $base-font-size;
    }
  }

// flex
.d-flex {
    display: flex;
  }
  .flex-column {
    flex-direction: column;
  }

  // 水平对齐
  $flex-jc: (
    start: flex-start,
    end: flex-end,
    center: center,
    between: space-between,
    around: space-around,
  );
  @each $key, $value in $flex-jc {
    .jc-#{$key} {
      justify-content: $value;
    }
  }

  // 垂直方向对齐方式
  $flex-ai: (
    start: flex-start,
    end: flex-end,
    center: center,
    stretch: stretch,
  );
  @each $key, $value in $flex-ai {
    .ai-#{$key} {
      align-items: $value;
    }
  }

  // 左边对齐 右边拉伸填满
  .flex-1 {
    flex: 1;
  }

  // 和上面一样 这个比较精确
  .flex-grow-1 {
    flex-grow: 1;
  }

// spacing 定义出标准的边距
// 等级0-5: 
//  等级  0  1    2   3  4    5
//  倍数  0 0.25 0.5  1  1.5   3  
//  以基础空间尺寸单位为1rem来算
// .mt-1  => margin top 1   => 0.25rem       1表示的就是等级
// .pb-2 => padding botom 2 => 0.5rem        2表示的是等级
$spacing-types: (
    m: margin,
    p: padding,
  );
  $spacing-directions: (
    t: top,
    r: right,
    b: bottom,
    l: left,
  );
  // 基础空间尺寸单位
  $spacing-base-size: 1rem;
  $spacing-sizes: (
    0: 0,
    1: 0.25,
    2: 0.5,
    3: 1,
    4: 1.5,
    5: 3,
  );
  // m-0, mx-0
  @each $typeKey, $type in $spacing-types {
    // .m-1
    @each $sizeKey, $size in $spacing-sizes {
      .#{$typeKey}-#{$sizeKey} {
        #{$type}: $size * $spacing-base-size;
      }
    }
    // .mx-1 , .my-1
    @each $sizeKey, $size in $spacing-sizes {
      .#{$typeKey}x-#{$sizeKey} {
        #{$type}-left: $size * $spacing-base-size;
        #{$type}-right: $size * $spacing-base-size;
      }
      .#{$typeKey}y-#{$sizeKey} {
        #{$type}-top: $size * $spacing-base-size;
        #{$type}-bottom: $size * $spacing-base-size;
      }
    }
    // .mt-1
    @each $directionKey, $direction in $spacing-directions {
      @each $sizeKey, $size in $spacing-sizes {
        .#{$typeKey}#{$directionKey}-#{$sizeKey} {
          #{$type}-#{$direction}: $size * $spacing-base-size;
        }
      }
    }
  }

  